from Person import Person


# from SQL import

class Student(Person):

    def __init__(self, age, degree_name, year, predicted_graduation_year, degree_type, id, first_name,
                 second_name, last_name, status, university_social_contributions=True, faculty_number=None):
        super().__init__(id, first_name, second_name, last_name, age, status)
        self._id = id
        self._age = age
        self._degree_name = degree_name
        self._year = year
        self._predicted_graduation_year = predicted_graduation_year
        self._degree_type = degree_type
        self._university_social_contributions = university_social_contributions
        self._faculty_number = faculty_number
        self._status = status

    # is_employed and generate_faculty_number shouldn't be there, because the student can't do them
    # --> should be generated by DB
    def is_employed(self, value):
        if value:
            self._university_social_contributions = False
        return

    def generate_faculty_number(self, user_id, course):
        # userId + courseId
        pass

    def calc_average_grade(self, *grades):
        pass


# TESTING ADDING DATA TO THE DATABASE --> IT WORKS!!
import psycopg2

first_student = Student(id=2, first_name='Bob', second_name='Machelroy', last_name='Jameson', age=22,
                        degree_name='Mathemathics', year=2019,
                        predicted_graduation_year=2023, degree_type='Bachelor', status=1, faculty_number=18184052,
                        university_social_contributions=True)

# test = first_student._age --> YES!


conn = psycopg2.connect(database="DB_WebStudent",
                        user='postgres',
                        password='postgres123',
                        host='localhost',
                        port=5432)

cur = conn.cursor()

cur.execute("""INSERT INTO "DB_WebStudent".public.student ("firstName","secondName","thirdName",
    "email","degreeId","degreeTypeId") \
      VALUES (%s, %s, %s, %s, %s, %s)""",
    (first_student._first_name, first_student._second_name, first_student._last_name, 'goshopetkov@email.com', 1, 1))

conn.commit()

conn.close()
